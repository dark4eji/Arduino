
lights_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000008e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000008e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000000fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000459  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039c  00000000  00000000  0000057d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018d  00000000  00000000  00000919  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025d  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000bc  00000000  00000000  00000d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000df5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0d c0       	rjmp	.+26     	; 0x20 <__bad_interrupt>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	02 d0       	rcall	.+4      	; 0x22 <main>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <main>:
	}
}

int main(void)
{
	DDRB |= (1 << LED);
  22:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |= (1 << RELAY);
  24:	ba 9a       	sbi	0x17, 2	; 23
	
	while (1)
	{	unsigned int check = PINB & (1 << PIR);
		if (check) {
  26:	b1 9b       	sbis	0x16, 1	; 22
  28:	03 c0       	rjmp	.+6      	; 0x30 <main+0xe>
#include <avr/io.h>
#include <util/delay.h>

void switchPinState(unsigned int state, unsigned int pin) {
	if (state == 1) {
		PORTB |= (1 << pin);
  2a:	c3 9a       	sbi	0x18, 3	; 24
		} else {
		PORTB &= ~(1 << pin);
  2c:	c2 98       	cbi	0x18, 2	; 24
  2e:	fb cf       	rjmp	.-10     	; 0x26 <main+0x4>
  30:	c3 98       	cbi	0x18, 3	; 24
#include <avr/io.h>
#include <util/delay.h>

void switchPinState(unsigned int state, unsigned int pin) {
	if (state == 1) {
		PORTB |= (1 << pin);
  32:	c2 9a       	sbi	0x18, 2	; 24
  34:	f8 cf       	rjmp	.-16     	; 0x26 <main+0x4>

00000036 <_exit>:
  36:	f8 94       	cli

00000038 <__stop_program>:
  38:	ff cf       	rjmp	.-2      	; 0x38 <__stop_program>
